## Machine Learning with Tree-Based Models in R
# Chap-1-Build a classification tree

Let's get started and build our first classification tree. A classification tree is a decision tree that performs a classification (vs regression) task.

You will train a decision tree model to understand which loan applications are at higher risk of default using a subset of the German Credit Dataset. The response variable, called "default", indicates whether the loan went into a default or not, which means this is a binary classification problem (there are just two classes).

You will use the rpart package to fit the decision tree and the rpart.plot package to visualize the tree.
# Look at the data
> str(creditsub)
'data.frame':	522 obs. of  5 variables:
 $ months_loan_duration: int  48 42 24 36 30 12 48 12 24 15 ...
 $ percent_of_income   : int  2 2 3 2 4 3 3 1 4 2 ...
 $ years_at_residence  : int  2 4 4 2 2 1 4 1 4 4 ...
 $ age                 : int  22 45 53 35 28 25 24 22 60 28 ...
 $ default             : Factor w/ 2 levels "no","yes": 2 1 2 1 2 2 2 1 2 1 ...
> 
> # Create the model
> credit_model <- rpart(formula = default ~ ., 
                        data = creditsub, 
                        method = "class")
> 
> # Display the results
> rpart.plot(x = credit_model, yesno = 2, type = 0, extra = 0)
> Train/test split
For this exercise, you'll randomly split the German Credit Dataset into two pieces: a training set (80%) called credit_train and a test set (20%) that we will call credit_test. We'll use these two sets throughout the chapter.
# Total number of rows in the credit data frame
> n <- nrow(credit)
> 
> # Number of rows for the training set (80% of the dataset)
> n_train <- round(0.8 * n)
> 
> # Create a vector of indices which is an 80% random sample
> set.seed(123)
> train_indices <- sample(1:n,n_train)
> 
> # Subset the credit data frame to training indices only
> credit_train <- credit[train_indices, ]
> 
> # Exclude the training indices to create the test set
> credit_test <- credit[-train_indices, ]
> Train a classification tree model
In this exercise, you will train a model on the newly created training set and print the model object to get a sense of the results.
# Train the model (to predict 'default')
> credit_model <- rpart(formula = default~., 
                        data = credit_train, 
                        method = "class")
> 
> # Look at the model output
> print(credit_model)
n= 800 

node), split, n, loss, yval, (yprob)
      * denotes terminal node

  1) root 800 238 no (0.70250000 0.29750000)  
    2) checking_balance=> 200 DM,unknown 369  45 no (0.87804878 0.12195122) *
    3) checking_balance=< 0 DM,1 - 200 DM 431 193 no (0.55220418 0.44779582)  
      6) months_loan_duration< 20.5 231  84 no (0.63636364 0.36363636)  
       12) credit_history=critical,good,poor 207  66 no (0.68115942 0.31884058)  
         24) amount< 7341 200  60 no (0.70000000 0.30000000) *
         25) amount>=7341 7   1 yes (0.14285714 0.85714286) *
       13) credit_history=perfect,very good 24   6 yes (0.25000000 0.75000000) *
      7) months_loan_duration>=20.5 200  91 yes (0.45500000 0.54500000)  
       14) savings_balance=> 1000 DM,unknown 35   9 no (0.74285714 0.25714286)  
         28) amount>=2079 26   2 no (0.92307692 0.07692308) *
         29) amount< 2079 9   2 yes (0.22222222 0.77777778) *
       15) savings_balance=< 100 DM,100 - 500 DM,500 - 1000 DM 165  65 yes (0.39393939 0.60606061)  
         30) months_loan_duration< 47.5 132  60 yes (0.45454545 0.54545455)  
           60) age>=29.5 77  35 no (0.54545455 0.45454545)  
            120) amount>=2249 62  24 no (0.61290323 0.38709677)  
              240) credit_history=critical,poor,very good 25   5 no (0.80000000 0.20000000) *
              241) credit_history=good,perfect 37  18 yes (0.48648649 0.51351351)  
                482) age< 41 21   7 no (0.66666667 0.33333333) *
                483) age>=41 16   4 yes (0.25000000 0.75000000) *
            121) amount< 2249 15   4 yes (0.26666667 0.73333333) *
           61) age< 29.5 55  18 yes (0.32727273 0.67272727)  
            122) months_loan_duration< 31.5 38  16 yes (0.42105263 0.57894737)  
              244) amount>=3415 17   6 no (0.64705882 0.35294118) *
              245) amount< 3415 21   5 yes (0.23809524 0.76190476) *
            123) months_loan_duration>=31.5 17   2 yes (0.11764706 0.88235294) *
         31) months_loan_duration>=47.5 33   5 yes (0.15151515 0.84848485) *
> Compute confusion matrix
As discussed in the previous video, there are a number of different metrics by which you can measure the performance of a classification model. In this exercise, we will evaluate the performance of the model using test set classification error. A confusion matrix is a convenient way to examine the per-class error rates for all classes at once.

The confusionMatrix() function from the caret package prints both the confusion matrix and a number of other useful classification metrics such as "Accuracy" (fraction of correctly classified instances).

The caret package has been loaded for you.
> # Generate predicted classes using the model object
> class_prediction <- predict(object = credit_model,  
                          newdata = credit_test,   
                          type = "class")
> 
> # Calculate the confusion matrix for the test set
> library(caret)
> confusionMatrix(data =class_prediction ,       
                  reference = credit_test$default)
Confusion Matrix and Statistics

          Reference
Prediction  no yes
       no  100  34
       yes  38  28
                                          
               Accuracy : 0.64            
                 95% CI : (0.5693, 0.7065)
    No Information Rate : 0.69            
    P-Value [Acc > NIR] : 0.9443          
                                          
                  Kappa : 0.1732          
 Mcnemar's Test P-Value : 0.7237          
                                          
            Sensitivity : 0.7246          
            Specificity : 0.4516          
         Pos Pred Value : 0.7463          
         Neg Pred Value : 0.4242          
             Prevalence : 0.6900          
         Detection Rate : 0.5000          
   Detection Prevalence : 0.6700          
      Balanced Accuracy : 0.5881          
                                          
       'Positive' Class : no
> Compare models with a different splitting criterion
> # Train a gini-based model
> credit_model1 <- rpart(formula = default ~ ., 
                         data = credit_train, 
                         method = "class",
                         parms = list(split = "gini"))
> 
> # Train an information-based model
> credit_model2 <- rpart(formula = default ~ ., 
                         data = credit_train, 
                         method = "class",
                         parms = list(split = "information"))
> 
> # Generate predictions on the validation set using the gini model
> pred1 <- predict(object = credit_model1, 
               newdata = credit_test,
               type = "class")
> 
> # Generate predictions on the validation set using the information model
> pred2 <- predict(object = credit_model2, 
               newdata = credit_test,
               type = "class")
> 
> # Compare classification error
> ce(actual = credit_test$default, 
     predicted = pred1)
[1] 0.295
> ce(actual = credit_test$default, 
     predicted = pred2)
[1] 0.275
# chap-2-Introduction to regression trees
Split the data
These examples will use a subset of the Student Performance Dataset from UCI ML Dataset Repository.

The goal of this exercise is to predict a student's final Mathematics grade based on the following variables: sex, age, address, studytime (weekly study time), schoolsup (extra educational support), famsup (family educational support), paid (extra paid classes within the course subject) and absences.

The response is final_grade (numeric: from 0 to 20, output target).

After initial exploration, split the data into training, validation, and test sets. In this chapter, we will introduce the idea of a validation set, which can be used to select a "best" model from a set of competing models.

In Chapter 1, we demonstrated a simple way to split the data into two pieces using the sample() function. In this exercise, we will take a slightly different approach to splitting the data that allows us to split the data into more than two parts (here, we want three: train, validation, test). We still use the sample() function, but instead of sampling the indices themselves, we will assign each row to either the training, validation or test sets according to a probability distribution.

The dataset grade is already in your workspace.
> # Look at the data
> str(grade)
'data.frame':	395 obs. of  8 variables:
 $ final_grade: num  3 3 5 7.5 5 7.5 5.5 3 9.5 7.5 ...
 $ age        : int  18 17 15 15 16 16 16 17 15 15 ...
 $ address    : Factor w/ 2 levels "R","U": 2 2 2 2 2 2 2 2 2 2 ...
 $ studytime  : int  2 2 2 3 2 2 2 2 2 2 ...
 $ schoolsup  : Factor w/ 2 levels "no","yes": 2 1 2 1 1 1 1 2 1 1 ...
 $ famsup     : Factor w/ 2 levels "no","yes": 1 2 1 2 2 2 1 2 2 2 ...
 $ paid       : Factor w/ 2 levels "no","yes": 1 1 2 2 2 2 1 1 2 2 ...
 $ absences   : int  6 4 10 2 4 10 0 6 0 0 ...
> 
> # Set seed and create assignment
> set.seed(1)
> assignment <- sample(1:3, size = nrow(grade), prob = c(0.7,0.15,0.15), replace = TRUE)
> 
> # Create a train, validation and tests from the original data frame
> grade_train <- grade[assignment == 1, ]    # subset grade to training indices only
> grade_valid <- grade[assignment == 2, ]  # subset grade to validation indices only
> grade_test <- grade[assignment == 3, ]   # subset grade to test indices only
> Train a regression tree model
In this exercise, we will use the grade_train dataset to fit a regression tree using rpart() and visualize it using rpart.plot(). A regression tree plot looks identical to a classification tree plot, with the exception that there will be numeric values in the leaf nodes instead of predicted classes.

This is very similar to what we did previously in Chapter 1. When fitting a classification tree, we use method = "class", however, when fitting a regression tree, we need to set method = "anova". By default, the rpart() function will make an intelligent guess as to what the method value should be based on the data type of your response column, but it's recommened that you explictly set the method for reproducibility reasons (since the auto-guesser may change in the future).

The grade_train training set is loaded into the workspace.
> # Train the model
> grade_model <- rpart(formula = final_grade ~ ., 
                       data =grade_train, 
                       method = "anova")
> 
> # Look at the model output
> print(grade_model)
n= 282 

node), split, n, deviance, yval
      * denotes terminal node

 1) root 282 1519.49700 5.271277  
   2) absences< 0.5 82  884.18600 4.323171  
     4) paid=no 50  565.50500 3.430000  
       8) famsup=yes 22  226.36360 2.272727 *
       9) famsup=no 28  286.52680 4.339286 *
     5) paid=yes 32  216.46880 5.718750  
      10) age>=17.5 10   82.90000 4.100000 *
      11) age< 17.5 22   95.45455 6.454545 *
   3) absences>=0.5 200  531.38000 5.660000  
     6) absences>=13.5 42  111.61900 4.904762 *
     7) absences< 13.5 158  389.43670 5.860759  
      14) schoolsup=yes 23   50.21739 4.847826 *
      15) schoolsup=no 135  311.60000 6.033333  
        30) studytime< 3.5 127  276.30710 5.940945 *
        31) studytime>=3.5 8   17.00000 7.500000 *
> 
> # Plot the tree model
> rpart.plot(x = grade_model , yesno = 2, type = 0, extra = 0)
> Evaluate a regression tree model
Predict the final grade for all students in the test set. The grade is on a 0-20 scale. Evaluate the model based on test set RMSE (Root Mean Squared Error). RMSE tells us approximately how far away our predictions are from the true values.
> # Generate predictions on a test set
> pred <- predict(object =grade_model,   # model object 
                  newdata = grade_test)  # test dataset
> 
> # Compute the RMSE
> rmse(actual = grade_test$final_grade, 
       predicted = pred)
[1] 2.278249
> Tuning the model
Tune (or "trim") the model using the prune() function by finding the best "CP" value (CP stands for "Complexity Parameter").
 # Plot the "CP Table"
> plotcp(grade_model)
> 
> # Print the "CP Table"
> print(grade_model$cptable)
          CP nsplit rel error    xerror       xstd
1 0.06839852      0 1.0000000 1.0080595 0.09215642
2 0.06726713      1 0.9316015 1.0920667 0.09543723
3 0.03462630      2 0.8643344 0.9969520 0.08632297
4 0.02508343      3 0.8297080 0.9291298 0.08571411
5 0.01995676      4 0.8046246 0.9357838 0.08560120
6 0.01817661      5 0.7846679 0.9337462 0.08087153
7 0.01203879      6 0.7664912 0.9092646 0.07982862
8 0.01000000      7 0.7544525 0.9407895 0.08399125
> 
> # Retrieve optimal cp value based on cross-validated error
> opt_index <- which.min(grade_model$cptable[, "xerror"])
> cp_opt <- grade_model$cptable[opt_index , "CP"]
> 
> # Prune the model (to optimized cp value)
> grade_model_opt <- prune(tree = grade_model, 
                           cp = cp_opt)
> 
> # Plot the optimized model
> rpart.plot(x = grade_model_opt, yesno = 2, type = 0, extra = 0)
> Generate a grid of hyperparameter values
Use expand.grid() to generate a grid of maxdepth and minsplit value
> # Establish a list of possible values for minsplit and maxdepth
> minsplit <- seq(1, 4, 1)
> maxdepth <- seq(1, 6, 1)
> 
> # Create a data frame containing all combinations
> hyper_grid <- expand.grid(minsplit = minsplit, maxdepth = maxdepth)
> 
> # Check out the grid
> head(hyper_grid)
  minsplit maxdepth
1        1        1
2        2        1
3        3        1
4        4        1
5        1        2
6        2        2
> 
> # Print the number of grid combinations
> nrow(hyper_grid)
[1] 24
> Generate a grid of models
In this exercise, we will write a simple loop to train a "grid" of models and store the models in a list called grade_models. R users who are familiar with the apply functions in R could think about how this loop could be easily converted into a function applied to a list as an extra-credit thought experiment.
# Number of potential models in the grid
> num_models <- nrow(hyper_grid)
> 
> # Create an empty list to store models
> grade_models <- list()
> 
> # Write a loop over the rows of hyper_grid to train the grid of models
> for (i in 1:num_models) {
  
      # Get minsplit, maxdepth values at row i
      minsplit <- hyper_grid$minsplit[i]
      maxdepth <- hyper_grid$maxdepth[i]
  
      # Train a model and store in the list
      grade_models[[i]] <- rpart(formula = final_grade ~ ., 
                                 data = grade_train, 
                                 method = "anova",
                                 minsplit = minsplit,
                                 maxdepth = maxdepth)
  }
> Evaluate the grid
Earlier in the chapter we split the dataset into three parts: training, validation and test.

A dataset that is not used in training is sometimes referred to as a "holdout" set. A holdout set is used to estimate model performance and although both validation and test sets are considered to be holdout data, there is a key difference:

Just like a test set, a validation set is used to evaluate the performance of a model. The difference is that a validation set is specifically used to compare the performance of a group of models with the goal of choosing a "best model" from the group. All the models in a group are evaluated on the same validation set and the model with the best performance is considered to be the winner.
Once you have the best model, a final estimate of performance is computed on the test set.
A test set should only ever be used to estimate model performance and should not be used in model selection. Typically if you use a test set more than once, you are probably doing something wrong.
> # Number of potential models in the grid
> num_models <- length(grade_models)
> 
> # Create an empty vector to store RMSE values
> rmse_values <- c()
> 
> # Write a loop over the models to compute validation RMSE
> for (i in 1:num_models) {
  
      # Retrieve the i^th model from the list
      model <- grade_models[[i]]
      
      # Generate predictions on grade_valid 
      pred <- predict(object = model,
                      newdata = grade_valid)
      
      # Compute validation RMSE and add to the 
      rmse_values[i] <- rmse(actual = grade_valid$final_grade, 
                             predicted = pred)
  }
> 
> # Identify the model with smallest validation set RMSE
> best_model <- grade_models[[which.min(rmse_values)]]
> 
> # Print the model paramters of the best model
> best_model$control
$minsplit
[1] 2

$minbucket
[1] 1

$cp
[1] 0.01

$maxcompete
[1] 4

$maxsurrogate
[1] 5

$usesurrogate
[1] 2

$surrogatestyle
[1] 0

$maxdepth
[1] 1

$xval
[1] 10
> 
> # Compute test set RMSE on best_model
> pred <- predict(object =best_model,
                  newdata = grade_test)
> rmse(actual = grade_test$final_grade, 
       predicted = pred)
[1] 2.124109
> chap-3-Introduction to bagged trees
Train a bagged tree model
Let's start by training a bagged tree model. You'll be using the bagging() function from the ipred package. The number of bagged trees can be specified using the nbagg parameter, but here we will use the default (25).

If we want to estimate the model's accuracy using the "out-of-bag" (OOB) samples, we can set the the coob parameter to TRUE. The OOB samples are the training obsevations that were not selected into the bootstrapped sample (used in training). Since these observations were not used in training, we can use them instead to evaluate the accuracy of the model (done automatically inside the bagging() function).
> # Bagging is a randomized model, so let's set a seed (123) for reproducibility
> set.seed(123)
> library(ipred)
> # Train a bagged model
> credit_model <- bagging(formula = default ~ ., 
                          data = credit_train,
                          coob = TRUE)
> 
> # Print the model
> print(credit_model)

Bagging classification trees with 25 bootstrap replications 

Call: bagging.data.frame(formula = default ~ ., data = credit_train, 
    coob = TRUE)

Out-of-bag estimate of misclassification error:  0.2788
> Prediction and confusion matrix
As you saw in the video, a confusion matrix is a very useful tool for examining all possible outcomes of your predictions (true positive, true negative, false positive, false negative).

In this exercise, you will predict those who will default using bagged trees. You will also create the confusion matrix using the confusionMatrix() function from the caret package.

It's always good to take a look at the output using the print() function.
> # Generate predicted classes using the model object
> class_prediction <- predict(object = credit_model,    
                              newdata = credit_test,  
                              type = "class")  # return classification labels
> 
> # Print the predicted classes
> print(class_prediction )
  [1] no  yes yes no  no  yes no  yes no  no  no  yes no  yes no  no  no  no 
 [19] no  no  no  no  no  yes no  no  no  yes no  yes yes yes no  no  no  no 
 [37] no  no  no  no  no  no  no  yes no  no  no  yes no  yes yes no  no  yes
 [55] no  no  no  no  no  no  no  no  no  no  no  yes no  no  no  no  yes no 
 [73] no  yes no  no  no  no  no  no  no  no  no  no  no  no  no  no  no  no 
 [91] yes no  yes no  no  no  no  yes no  no  no  no  no  no  yes no  no  no 
[109] no  no  no  no  no  no  no  no  no  no  no  no  no  no  yes no  no  no 
[127] no  no  no  no  no  no  no  no  no  no  no  no  no  no  yes no  yes no 
[145] yes no  no  no  no  no  no  no  yes no  no  no  no  no  no  no  no  yes
[163] no  no  no  no  yes yes no  no  no  no  yes yes no  no  no  no  no  no 
[181] no  yes no  no  no  no  yes no  no  no  no  yes no  no  no  no  yes no 
[199] no  yes
Levels: no yes
> 
> # Calculate the confusion matrix for the test set
> confusionMatrix(data = class_prediction ,       
                  reference = credit_test$default)
Confusion Matrix and Statistics

          Reference
Prediction  no yes
       no  126  36
       yes  12  26
                                          
               Accuracy : 0.76            
                 95% CI : (0.6947, 0.8174)
    No Information Rate : 0.69            
    P-Value [Acc > NIR] : 0.0178277       
                                          
                  Kappa : 0.3721          
 Mcnemar's Test P-Value : 0.0009009       
                                          
            Sensitivity : 0.9130          
            Specificity : 0.4194          
         Pos Pred Value : 0.7778          
         Neg Pred Value : 0.6842          
             Prevalence : 0.6900          
         Detection Rate : 0.6300          
   Detection Prevalence : 0.8100          
      Balanced Accuracy : 0.6662          
                                          
       'Positive' Class : no
> Predict on a test set and compute AUC
In binary classification problems, we can predict numeric values instead of class labels. In fact, class labels are created only after you use the model to predict a raw, numeric, predicted value for a test point.

The predicted label is generated by applying a threshold to the predicted value, such that all tests points with predicted value greater than that threshold get a predicted label of "1" and, points below that threshold get a predicted label of "0".

In this exercise, generate predicted values (rather than class labels) on the test set and evaluate performance based on AUC (Area Under the ROC Curve). The AUC is a common metric for evaluating the discriminatory ability of a binary classification model.
> # Generate predictions on the test set
> pred <- predict(object = credit_model,
                  newdata = credit_test,
                  type = "prob")
> 
> 
> # `pred` is a matrix
> class(pred)
[1] "matrix"
> 
> # Look at the pred format
> head(pred)
       no  yes
[1,] 0.96 0.04
[2,] 0.28 0.72
[3,] 0.36 0.64
[4,] 0.76 0.24
[5,] 0.92 0.08
[6,] 0.48 0.52
> 
> # Compute the AUC (`actual` must be a binary (or 1/0 numeric) vector)
> auc(actual = ifelse(credit_test$default == "yes", 1, 0), 
      predicted = pred[,"yes"])
[1] 0.7809724
> Cross-validate a bagged tree model in caret
Use caret::train() with the "treebag" method to train a model and evaluate the model using cross-validated AUC. The caret package allows the user to easily cross-validate any model across any relevant performance metric. In this case, we will use 5-fold cross validation and evaluate cross-validated AUC (Area Under the ROC Curve).
> # Specify the training configuration
> ctrl <- trainControl(method = "cv",     # Cross-validation
                       number = 5,      # 5 folds
                       classProbs = TRUE,                  # For AUC
                       summaryFunction = twoClassSummary)  # For AUC
> 
> # Cross validate the credit model using "treebag" method;
> # Track AUC (Area under the ROC curve)
> set.seed(1)  # for reproducibility
> credit_caret_model <- train(default ~ .,
                              data = credit_train, 
                              method = "treebag",
                              metric = "ROC",
                              trControl = ctrl)
> 
> # Look at the model object
> print(credit_caret_model)
Bagged CART 

800 samples
 16 predictor
  2 classes: 'no', 'yes' 

No pre-processing
Resampling: Cross-Validated (5 fold) 
Summary of sample sizes: 641, 640, 640, 639, 640 
Resampling results:

  ROC        Sens       Spec     
  0.7203687  0.8275126  0.4417553
> 
> # Inspect the contents of the model list
> names(credit_caret_model)
 [1] "method"       "modelInfo"    "modelType"    "results"      "pred"        
 [6] "bestTune"     "call"         "dots"         "metric"       "control"     
[11] "finalModel"   "preProcess"   "trainingData" "resample"     "resampledCM" 
[16] "perfNames"    "maximize"     "yLimits"      "times"        "levels"      
[21] "terms"        "coefnames"    "contrasts"    "xlevels"
> 
> # Print the CV AUC
> credit_caret_model$results[,"ROC"]
[1] 0.7203687
> Generate predictions from the caret model
Generate predictions on a test set for the caret model.
> # Generate predictions on the test set
> pred <- predict(object = credit_caret_model, 
                  newdata = credit_test,
                  type = "prob")
> 
> # Compute the AUC (`actual` must be a binary (or 1/0 numeric) vector)
> auc(actual = ifelse(credit_test$default == "yes", 1, 0), 
                      predicted = pred[,"yes"])
[1] 0.7762389
> Compare test set performance to CV performance
In this excercise, you will print test set AUC estimates that you computed in previous exercises. These two methods use the same code underneath, so the estimates should be very similar.

The credit_ipred_model_test_auc object stores the test set AUC from the model trained using the ipred::bagging() function.
The credit_caret_model_test_auc object stores the test set AUC from the model trained using the caret::train() function with method = "treebag".
Lastly, we will print the 5-fold cross-validated estimate of AUC that is stored within the credit_caret_model object. This number will be a more accurate estimate of the true model performance since we have averaged the performance over five models instead of just one.

On small datasets like this one, the difference between test set model performance estimates and cross-validated model performance estimates will tend to be more pronounced. When using small data, it's recommended to use cross-validated estimates of performance because they are more stable.
> # Print ipred::bagging test set AUC estimate
> print(credit_ipred_model_test_auc)
[1] 0.7809724
> 
> # Print caret "treebag" test set AUC estimate
> print(credit_caret_model_test_auc)
[1] 0.7762389
> 
> # Compare to caret 5-fold cross-validated AUC
> credit_caret_model$results[, "ROC"]
[1] 0.7203687
> #chapter4-Introduction to Random Forest
Train a Random Forest model
Here you will use the randomForest() function from the randomForest package to train a Random Forest classifier to predict loan default.
> # Train a Random Forest
> set.seed(1)  # for reproducibility
> credit_model <- randomForest(formula = default ~ ., 
                               data = credit_train)
> 
> # Print the model output
> print(credit_model)

Call:
 randomForest(formula = default ~ ., data = credit_train) 
               Type of random forest: classification
                     Number of trees: 500
No. of variables tried at each split: 4

        OOB estimate of  error rate: 23.62%
Confusion matrix:
     no yes class.error
no  518  44  0.07829181
yes 145  93  0.60924370
> Evaluate out-of-bag error
Here you will plot the OOB error as a function of the number of trees trained, and extract the final OOB error of the Random Forest model from the trained model object.
> # Grab OOB error matrix & take a look
> err <- credit_model$err.rate
> head(err)
           OOB        no       yes
[1,] 0.3414634 0.2657005 0.5375000
[2,] 0.3311966 0.2462908 0.5496183
[3,] 0.3232831 0.2476636 0.5147929
[4,] 0.3164933 0.2180294 0.5561224
[5,] 0.3197756 0.2095808 0.5801887
[6,] 0.3176944 0.2115385 0.5619469
> 
> # Look at final OOB error rate (last row in err matrix)
> oob_err <- err[500, "OOB"]
> print(oob_err)
    OOB 
0.24125
> 
> # Plot the model trained in the previous exercise
> plot(credit_model)
> 
> # Add a legend since it doesn't have one by default
> legend(x = "right", 
         legend = colnames(err),
         fill = 1:ncol(err))
> Evaluate model performance on a test set
Use the caret::confusionMatrix() function to compute test set accuracy and generate a confusion matrix. Compare the test set accuracy to the OOB accuracy.
> # Generate predicted classes using the model object
> class_prediction <- predict(object = credit_model,   # model object 
                              newdata = credit_test,  # test dataset
                              type = "class") # return classification labels
> 
> # Calculate the confusion matrix for the test set
> cm <- confusionMatrix(data =class_prediction,       # predicted classes
                        reference = credit_test$default)  # actual classes
> print(cm)
Confusion Matrix and Statistics

          Reference
Prediction  no yes
       no  131  40
       yes   7  22
                                       
               Accuracy : 0.765        
                 95% CI : (0.7, 0.8219)
    No Information Rate : 0.69         
    P-Value [Acc > NIR] : 0.01186      
                                       
                  Kappa : 0.3563       
 Mcnemar's Test P-Value : 3.046e-06    
                                       
            Sensitivity : 0.9493       
            Specificity : 0.3548       
         Pos Pred Value : 0.7661       
         Neg Pred Value : 0.7586       
             Prevalence : 0.6900       
         Detection Rate : 0.6550       
   Detection Prevalence : 0.8550       
      Balanced Accuracy : 0.6521       
                                       
       'Positive' Class : no
> 
> # Compare test set accuracy to OOB accuracy
> paste0("Test Accuracy: ", cm$overall[1])
[1] "Test Accuracy: 0.765"
> paste0("OOB Accuracy: ", 1 - oob_err)
[1] "OOB Accuracy: 0.75875"
> Evaluate test set AUC
In Chapter 3, we learned about the AUC metric for evaluating binary classification models. In this exercise, you will compute test set AUC for the Random Forest model.
> # Generate predictions on the test set
> pred <- predict(object = credit_model,
              newdata = credit_test,
              type = "prob")
> 
> # `pred` is a matrix
> class(pred)
[1] "matrix" "votes"
> 
> # Look at the pred format
> head(pred)
      no   yes
3  0.894 0.106
10 0.294 0.706
11 0.414 0.586
14 0.772 0.228
27 0.760 0.240
28 0.618 0.382
> 
> # Compute the AUC (`actual` must be a binary 1/0 numeric vector)
> auc(actual = ifelse(credit_test$default == "yes", 1, 0), 
      predicted = pred[,"yes"])
[1] 0.8037634
> Tuning a Random Forest via mtry
In this exercise, you will use the randomForest::tuneRF() to tune mtry (by training several models). This function is a specific utility to tune the mtry parameter based on OOB error, which is helpful when you want a quick & easy way to tune your model. A more generic way of tuning Random Forest parameters will be presented in the following exercise.
> # Execute the tuning process
> set.seed(1)
> res <- tuneRF(x = subset(credit_train, select = -default),
                y = credit_train$default,
                ntreeTry = 500)
mtry = 4  OOB error = 23.62% 
Searching left ...
mtry = 2 	OOB error = 25.5% 
-0.07936508 0.05 
Searching right ...
mtry = 8 	OOB error = 24% 
-0.01587302 0.05
> 
> # Look at results
> print(res)
      mtry OOBError
2.OOB    2  0.25500
4.OOB    4  0.23625
8.OOB    8  0.24000
> 
> # Find the mtry value that minimizes OOB Error
> mtry_opt <- res[,"mtry"][which.min(res[,"OOBError"])]
> print(mtry_opt)
4.OOB 
    4
> 
> # If you just want to return the best RF model (rather than results)
> # you can set `doBest = TRUE` in `tuneRF()` to return the best RF model
> # instead of a set performance matrix.
> Tuning a Random Forest via tree depth
In Chapter 2, we created a manual grid of hyperparameters using the expand.grid() function and wrote code that trained and evaluated the models of the grid in a loop. In this exercise, you will create a grid of mtry, nodesize and sampsize values. In this example, we will identify the "best model" based on OOB error. The best model is defined as the model from our grid which minimizes OOB error.

Keep in mind that there are other ways to select a best model from a grid, such as choosing the best model based on validation AUC. However, for this exercise, we will use the built-in OOB error calculations instead of using a separate validation set.
> # Establish a list of possible values for mtry, nodesize and sampsize
> mtry <- seq(4, ncol(credit_train) * 0.8, 2)
> nodesize <- seq(3, 8, 2)
> sampsize <- nrow(credit_train) * c(0.7, 0.8)
> 
> # Create a data frame containing all combinations
> hyper_grid <- expand.grid(mtry = mtry, nodesize = nodesize, sampsize = sampsize)
> 
> # Create an empty vector to store OOB error values
> oob_err <- c()
> 
> # Write a loop over the rows of hyper_grid to train the grid of models
> for (i in 1:nrow(hyper_grid)) {
  
      # Train a Random Forest model
      model <- randomForest(formula = default ~ ., 
                            data = credit_train,
                            mtry = hyper_grid$mtry[i],
                            nodesize = hyper_grid$nodesize[i],
                            sampsize = hyper_grid$sampsize[i])
                            
      # Store OOB error for the model                      
      oob_err[i] <- model$err.rate[nrow(model$err.rate), "OOB"]
  }
> 
> # Identify optimal set of hyperparmeters based on OOB error
> opt_i <- which.min(oob_err)
> print(hyper_grid[opt_i,])
   mtry nodesize sampsize
28    8        7      640
> #chap-5-Introduction to boosting
Train a GBM model
Here you will use the gbm() function to train a GBM classifier to predict loan default. You will train a 10,000-tree GBM on the credit_train dataset, which is pre-loaded into your workspace.

Using such a large number of trees (10,000) is probably not optimal for a GBM model, but we will build more trees than we need and then select the optimal number of trees based on early performance-based stopping. The best GBM model will likely contain fewer trees than we started with.

For binary classification, gbm() requires the response to be encoded as 0/1 (numeric), so we will have to convert from a "no/yes" factor to a 0/1 numeric response column.

Also, the the gbm() function requires the user to specify a distribution argument. For a binary classification problem, you should set distribution = "bernoulli". The Bernoulli distribution models a binary response.
> # Convert "yes" to 1, "no" to 0
> credit_train$default <- ifelse(credit_train$default == "yes", 1, 0)
> 
> # Train a 10000-tree GBM model
> set.seed(1)
> credit_model <- gbm(formula = default ~ ., 
                      distribution = "bernoulli", 
                      data =credit_train,
                      n.trees = 10000)
> 
> # Print the model object
> print(credit_model)
gbm(formula = default ~ ., distribution = "bernoulli", data = credit_train, 
    n.trees = 10000)
A gradient boosted model with bernoulli loss function.
10000 iterations were performed.
There were 16 predictors of which 16 had non-zero influence.
> 
> # summary() prints variable importance
> summary(credit_model)
                                      var     rel.inf
checking_balance         checking_balance 33.49502510
amount                             amount 11.62938098
months_loan_duration months_loan_duration 11.17113439
credit_history             credit_history 11.15698321
savings_balance           savings_balance  6.44293358
employment_duration   employment_duration  6.06266137
age                                   age  5.73175696
percent_of_income       percent_of_income  3.74219743
other_credit                 other_credit  3.56695375
purpose                           purpose  3.38820798
housing                           housing  1.55169398
years_at_residence     years_at_residence  1.35255308
job                                   job  0.47631930
phone                               phone  0.09142691
existing_loans_count existing_loans_count  0.08924265
dependents                     dependents  0.05152933
> Prediction using a GBM model
The gbm package uses a predict() function to generate predictions from a model, similar to many other machine learning packages in R. When you see a function like predict() that works on many different types of input (a GBM model, a RF model, a GLM model, etc), that indicates that predict() is an "alias" for a GBM-specific version of that function. The GBM specific version of that function is predict.gbm(), but for convenience sake, we can just use predict() (either works).

One thing that's particular to the predict.gbm() however, is that you need to specify the number of trees used in the prediction. There is no default, so you have to specify this manually. For now, we can use the same number of trees that we specified when training the model, which is 10,000 (though this may not be the optimal number to use).

Another argument that you can specify is type, which is only relevant to Bernoulli and Poisson distributed outcomes. When using Bernoulli loss, the returned value is on the log odds scale by default and for Poisson, it's on the log scale. If instead you specify type = "response", then gbm converts the predicted values back to the same scale as the outcome. This will convert the predicted values into probabilities for Bernoulli and expected counts for Poisson.
> # Since we converted the training response col, let's also convert the test response col
> credit_test$default <- ifelse(credit_test$default =="yes", 1, 0)
> 
> # Generate predictions on the test set
> preds1 <- predict(object = credit_model, 
                    newdata = credit_test,
                    n.trees = 10000)
> 
> # Generate predictions on the test set (scale to response)
> preds2 <- predict(object = credit_model, 
                    newdata = credit_test,
                    n.trees = 10000,
                    type = "response")
> 
> # Compare the range of the two sets of predictions
> range(preds1)
[1] -3.210354  2.088293
> range(preds2)
[1] 0.03877796 0.88976007
> Evaluate test set AUC
Compute test set AUC of the GBM model for the two sets of predictions. We will notice that they are the same value. That's because AUC is a rank-based metric, so changing the actual values does not change the value of the AUC.

However, if we were to use a scale-aware metric like RMSE to evaluate performance, we would want to make sure we converted the predictions back to the original scale of the response.
> # Generate the test set AUCs using the two sets of preditions & compare
> auc(actual = credit_test$default, predicted = preds1)  #default
[1] 0.7875175
> auc(actual = credit_test$default, predicted = preds2)  #rescaled
[1] 0.7875175
> Early stopping in GBMs
Use the gbm.perf() function to estimate the optimal number of boosting iterations (aka n.trees) for a GBM model object using both OOB and CV error. When you set out to train a large number of trees in a GBM (such as 10,000) and you use a validation method to determine an earlier (smaller) number of trees, then that's called "early stopping". The term "early stopping" is not unique to GBMs, but can describe auto-tuning the number of iterations in an iterative learning algorithm.
> # Optimal ntree estimate based on OOB
> ntree_opt_oob <- gbm.perf(object = credit_model, 
                            method = "OOB", 
                            oobag.curve = TRUE)
Warning message: OOB generally underestimates the optimal number of iterations although predictive performance is reasonably competitive. Using cv.folds>0 when calling gbm usually results in improved predictive performance.
> 
> # Train a CV GBM model
> set.seed(1)
> credit_model_cv <- gbm(formula = default ~ ., 
                         distribution = "bernoulli", 
                         data = credit_train,
                         n.trees = 10000,
                         cv.folds = 2)
> 
> # Optimal ntree estimate based on CV
> ntree_opt_cv <- gbm.perf(object = credit_model_cv, 
                           method ="cv")
> 
> # Compare the estimates
> print(paste0("Optimal n.trees (OOB Estimate): ", ntree_opt_oob))
[1] "Optimal n.trees (OOB Estimate): 3233"
> print(paste0("Optimal n.trees (CV Estimate): ", ntree_opt_cv))
[1] "Optimal n.trees (CV Estimate): 7889"
> OOB vs CV-based early stopping
In the previous exercise, we used OOB error and cross-validated error to estimate the optimal number of trees in the GBM. These are two different ways to estimate the optimal number of trees, so in this exercise we will compare the performance of the models on a test set. We can use the same model object to make both of these estimates since the predict.gbm() function allows you to use any subset of the total number of trees (in our case, the total number is 10,000).
> # Generate predictions on the test set using ntree_opt_oob number of trees
> preds1 <- predict(object = credit_model, 
                    newdata = credit_test,
                    n.trees = ntree_opt_oob)
> 
> # Generate predictions on the test set using ntree_opt_cv number of trees
> preds2 <- predict(object = credit_model, 
                    newdata = credit_test,
                    n.trees = ntree_opt_cv)
> 
> # Generate the test set AUCs using the two sets of preditions & compare
> auc1 <- auc(actual = credit_test$default, predicted = preds1)  #OOB
> auc2 <- auc(actual = credit_test$default, predicted = preds2)  #CV
> 
> # Compare AUC
> print(paste0("Test set AUC (OOB): ", auc1))
[1] "Test set AUC (OOB): 0.777816736792894"
> print(paste0("Test set AUC (CV): ", auc2))
[1] "Test set AUC (CV): 0.785530621785881"
> Compare all models based on AUC
In this final exercise, we will perform a model comparison across all types of models that we've learned about so far: Decision Trees, Bagged Trees, Random Forest and Gradient Boosting Machine (GBM). The models were all trained on the same training set, credit_train, and predictions were made for the credit_test dataset.

We have pre-loaded four sets of test set predictions, generated using the models we trained in previous chapters (one for each model type). The numbers stored in the prediction vectors are the raw predicted values themselves -- not the predicted class labels. Using the raw predicted values, we can calculate test set AUC for each model and compare the results.
> # Generate the test set AUCs using the two sets of predictions & compare
> actual <- credit_test$default
> dt_auc <- auc(actual = actual, predicted = dt_preds)
> bag_auc <- auc(actual = actual, predicted = bag_preds)
> rf_auc <- auc(actual = actual, predicted = rf_preds)
> gbm_auc <- auc(actual = actual, predicted = gbm_preds)
> 
> # Print results
> sprintf("Decision Tree Test AUC: %.3f", dt_auc)
[1] "Decision Tree Test AUC: 0.627"
> sprintf("Bagged Trees Test AUC: %.3f", bag_auc)
[1] "Bagged Trees Test AUC: 0.781"
> sprintf("Random Forest Test AUC: %.3f", rf_auc)
[1] "Random Forest Test AUC: 0.804"
> sprintf("GBM Test AUC: %.3f", gbm_auc)
[1] "GBM Test AUC: 0.786"
> Plot & compare ROC curves
We conclude this course by plotting the ROC curves for all the models (one from each chapter) on the same graph. The ROCR package provides the prediction() and performance() functions which generate the data required for plotting the ROC curve, given a set of predictions and actual (true) values.

The more "up and to the left" the ROC curve of a model is, the better the model. The AUC performance metric is literally the "Area Under the ROC Curve", so the greater the area under this curve, the higher the AUC, and the better-performing the model is.
> # List of predictions
> preds_list <- list(dt_preds, bag_preds, rf_preds, gbm_preds)
> 
> # List of actual values (same for all)
> m <- length(preds_list)
> actuals_list <- rep(list(credit_test$default), m)
> 
> # Plot the ROC curves
> pred <- prediction(preds_list, actuals_list)
> rocs <- performance(pred, "tpr", "fpr")
> plot(rocs, col = as.list(1:m), main = "Test Set ROC Curves")
> legend(x = "bottomright", 
         legend = c("Decision Tree", "Bagged Trees", "Random Forest", "GBM"),
         fill = 1:m)
> 
